// Jacoco 플러그인을 사용하겠다
apply plugin: 'jacoco'
apply plugin: 'jacoco-report-aggregation'

jacoco {
    toolVersion = '0.8.11'
}


// flavor가 설정된 모듈의 경우, 적용된 flavor 명칭을 알아야한다
// 모듈의 build.gradle 파일에 설정된 flavor 값을 가져온다
String flavor = project.ext.has('pFlavor') ? project.ext.pFlavor : ''

// jacoco는 jutni test 결과를 기반으로 동작한다
// jacoco 리포트 생성 작업 이전에 unit test task가 완료되어야한다
def dependsOnTask = [
        ":domain:jacocoTestReport",
        "test${flavor.capitalize()}DebugUnitTest",
        "create${flavor.capitalize()}DebugCoverageReport"
]

def fileFilter = [
// data binding
'**/databinding/*',
'android/databinding/**/*.class',
'**/android/databinding/*Binding.class',
'**/android/databinding/*',
'**/androidx/databinding/*',
'**/BR.*',
// android
'**/R.class',
'**/R$*.class',
'**/BuildConfig.*',
'**/Manifest*.*',
'**/*Test*.*',
'android/**/*.*',
// kotlin
'**/*MapperImpl*.*',
'**/*$ViewInjector*.*',
'**/*$ViewBinder*.*',
'**/BuildConfig.*',
'**/*Component*.*',
'**/*BR*.*',
'**/Manifest*.*',
'**/*$Lambda$*.*',
'**/*Companion*.*',
'**/*Module*.*',
'**/*Dagger*.*',
'**/*Hilt*.*',
'**/*MembersInjector*.*',
'**/*_MembersInjector.class',
'**/*_Factory*.*',
'**/*_Provide*Factory*.*',
'**/*Extensions*.*',
// sealed and data classes
'**/*$Result.*',
'**/*$Result$*.*',
// adapters generated by moshi
'**/*JsonAdapter.*',
]

// 멀티모듈을 1개의 커버리지 리포트로 병합
tasks.register('generateMultiModuleCodeCoverageReports', JacocoReport) {
    dependsOn dependsOnTask
    description = 'Generates an aggregate report from all subprojects'
    group = "Reporting"

    def srcPathList = []
    def classDirPathList = []
    def executionDataIncludesList = []

    rootProject.subprojects.forEach {
        srcPathList.add("$it.projectDir/src/main/java")
        srcPathList.add("$it.projectDir/src/main/kotlin")

        // :app, :data
        classDirPathList.add(fileTree(dir: "$it.buildDir/intermediates/javac/debug/classes", excludes: fileFilter))
        classDirPathList.add(fileTree(dir: "$it.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter))
        // :domain
        classDirPathList.add(fileTree(dir: "$it.buildDir/classes/kotlin/main", excludes: fileFilter))
    }

    // :app, :data
    executionDataIncludesList.add("**/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec")
    executionDataIncludesList.add("**/outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec")
    executionDataIncludesList.add("**/outputs/code_coverage/debugAndroidTest/connected/**/*.ec")
    // :domain
    executionDataIncludesList.add("**/jacoco/test.exec")

    sourceDirectories.from = files(srcPathList)
    additionalSourceDirs.from = files(srcPathList)
    classDirectories.from = files(classDirPathList)
    executionData.from = fileTree(dir: '.', includes: executionDataIncludesList)

    def reportDirPath = "$rootDir/output/coverage-report"

    reports {
        html {
            required = true
            destination file("$reportDirPath/${project.name}")
        }
        xml {
            required = true
            destination file("$reportDirPath/${project.name}.xml")
        }
    }
}


